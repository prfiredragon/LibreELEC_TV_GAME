From 85f282711d127c98556065ec2f6dd530e32feb3f Mon Sep 17 00:00:00 2001
From: "Chris \"Koying\" Browet" <cbro@semperpax.com>
Date: Sun, 10 Jan 2016 19:58:23 +0100
Subject: [PATCH] FIX: [MVC;SSIF] append mvc part leftover as well

Fixes MVC_green_macroblocks_00049.ssif
---
 .../cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp | 79 ++++++++++++++++++----
 1 file changed, 66 insertions(+), 13 deletions(-)

diff --git a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
index a4c5b15..b7b8db4 100644
--- a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
+++ b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
@@ -52,6 +52,8 @@
 #include "stdint.h"
 #endif
 
+//#define DEBUG_VERBOSE 1
+
 extern "C" {
 #include "libavutil/opt.h"
 }
@@ -910,20 +912,31 @@ DemuxPacket* CDVDDemuxFFmpeg::Read()
         }
         else
         {
-          DemuxPacket* mvcpkt = m_SSIFqueue.front();
-          double tsA = (pPacket->dts != AV_NOPTS_VALUE ? pPacket->dts : pPacket->pts);
-          double tsB = (mvcpkt->dts != AV_NOPTS_VALUE ? mvcpkt->dts : mvcpkt->pts);
-          while (tsB < tsA)
+          double tsA = (pPacket->dts != DVD_NOPTS_VALUE ? pPacket->dts : pPacket->pts);
+          double tsB = DVD_NOPTS_VALUE;
+
+          DemuxPacket* mvcpkt = NULL;
+          if (!m_SSIFqueue.empty())
           {
-            m_SSIFqueue.pop();
-            if (m_SSIFqueue.empty())
+            mvcpkt = m_SSIFqueue.front();
+            tsB = (mvcpkt->dts != DVD_NOPTS_VALUE ? mvcpkt->dts : mvcpkt->pts);
+            while (tsB < tsA)
             {
-              tsB = AV_NOPTS_VALUE;
-              break;
+#if defined(DEBUG_VERBOSE)
+              CLog::Log(LOGERROR, "!!! MVC error: missing h264 packet: pts(%f) dts(%f) sz(%d) - %f", mvcpkt->pts, mvcpkt->dts, mvcpkt->iSize, tsA);
+#endif
+              CDVDDemuxUtils::FreeDemuxPacket(mvcpkt);
+              mvcpkt = NULL;
+
+              m_SSIFqueue.pop();
+              if (m_SSIFqueue.empty())
+              {
+                tsB = DVD_NOPTS_VALUE;
+                break;
+              }
+              mvcpkt = m_SSIFqueue.front();
+              tsB = (mvcpkt->dts != DVD_NOPTS_VALUE ? mvcpkt->dts : mvcpkt->pts);
             }
-            CDVDDemuxUtils::FreeDemuxPacket(mvcpkt);
-            mvcpkt = m_SSIFqueue.front();
-            tsB = (mvcpkt->dts != AV_NOPTS_VALUE ? mvcpkt->dts : mvcpkt->pts);
           }
           if (tsA == tsB)
           {
@@ -937,15 +950,55 @@ DemuxPacket* CDVDDemuxFFmpeg::Read()
             newpkt->iSize = pPacket->iSize + mvcpkt->iSize;
             memcpy(newpkt->pData, pPacket->pData, pPacket->iSize);
             memcpy(newpkt->pData + pPacket->iSize, mvcpkt->pData, mvcpkt->iSize);
-            //CLog::Log(LOGDEBUG, ">>> MVC merged packet: %d+%d, pts(%f/%f) dts (%f/%f)", pPacket->iSize, mvcpkt->iSize, pPacket->pts, mvcpkt->pts, pPacket->dts, mvcpkt->dts);
+
+#if defined(DEBUG_VERBOSE)
+            CLog::Log(LOGDEBUG, ">>> MVC merged packet: %d+%d, pts(%f/%f) dts (%f/%f)", pPacket->iSize, mvcpkt->iSize, pPacket->pts, mvcpkt->pts, pPacket->dts, mvcpkt->dts);
+#endif
 
             CDVDDemuxUtils::FreeDemuxPacket(pPacket);
+            pPacket = NULL;
             CDVDDemuxUtils::FreeDemuxPacket(mvcpkt);
+            mvcpkt = NULL;
+
+            if (!m_SSIFqueue.empty())
+            {
+              mvcpkt = m_SSIFqueue.front();
+              while (mvcpkt->dts == DVD_NOPTS_VALUE && mvcpkt->pts == DVD_NOPTS_VALUE)
+              {
+                // Append leftover
+                DemuxPacket* oldpkt = newpkt;
+
+                newpkt = CDVDDemuxUtils::AllocateDemuxPacket(oldpkt->iSize + mvcpkt->iSize);
+                newpkt->iSize = oldpkt->iSize;
+                newpkt->pts = oldpkt->pts;
+                newpkt->dts = oldpkt->dts;
+                newpkt->duration = oldpkt->duration;
+                newpkt->iGroupId = oldpkt->iGroupId;
+                newpkt->iStreamId = oldpkt->iStreamId;
+
+                memcpy(newpkt->pData, oldpkt->pData, oldpkt->iSize);
+                memcpy(newpkt->pData + oldpkt->iSize, mvcpkt->pData, mvcpkt->iSize);
+                newpkt->iSize += mvcpkt->iSize;
+
+#if defined(DEBUG_VERBOSE)
+                CLog::Log(LOGDEBUG, ">>> MVC merged leftover: %d+%d, pts(%f) dts (%f)", oldpkt->iSize, mvcpkt->iSize, newpkt->pts, newpkt->dts);
+#endif
+
+                CDVDDemuxUtils::FreeDemuxPacket(oldpkt);
+                m_SSIFqueue.pop();
+                if (m_SSIFqueue.empty())
+                  break;
+                mvcpkt = m_SSIFqueue.front();
+              }
+            }
+
             pPacket = newpkt;
           }
           else
           {
-            //CLog::Log(LOGERROR, "!!! MVC error: missing mvc packet: pts(%f) dts(%f) - %lld", pPacket->pts, pPacket->dts, m_pkt.pkt.pts);
+#if defined(DEBUG_VERBOSE)
+            CLog::Log(LOGERROR, "!!! MVC error: missing mvc packet: pts(%f) dts(%f) sz(%d) - %f", pPacket->pts, pPacket->dts, pPacket->iSize, tsB);
+#endif
             // Ignore packets without MVC part; solves seeking
             CDVDDemuxUtils::FreeDemuxPacket(pPacket);
             pPacket = CDVDDemuxUtils::AllocateDemuxPacket(0);
diff --git a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
index b7b8db4..3e0ab35 100644
--- a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
+++ b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
@@ -177,6 +177,7 @@ CDVDDemuxFFmpeg::CDVDDemuxFFmpeg() : CDVDDemux()
   m_bMatroska = false;
   m_bAVI = false;
   m_bSSIF = false;
+  m_bSSIFSyncing = false;
   m_speed = DVD_PLAYSPEED_NORMAL;
   m_program = UINT_MAX;
   m_pkt.result = -1;
@@ -520,11 +521,17 @@ void CDVDDemuxFFmpeg::Dispose()
 {
   m_pkt.result = -1;
   av_free_packet(&m_pkt.pkt);
-  while (!m_SSIFqueue.empty())
+  while (!m_H264queue.empty())
   {
-    CDVDDemuxUtils::FreeDemuxPacket(m_SSIFqueue.front());
-    m_SSIFqueue.pop();
+    CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
+    m_H264queue.pop();
   }
+  while (!m_MVCqueue.empty())
+  {
+    CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
+    m_MVCqueue.pop();
+  }
+  m_bSSIFSyncing = true;
 
   if (m_pFormatContext)
   {
@@ -573,11 +580,17 @@ void CDVDDemuxFFmpeg::Flush()
 
   m_pkt.result = -1;
   av_free_packet(&m_pkt.pkt);
-  while (!m_SSIFqueue.empty())
+  while (!m_H264queue.empty())
+  {
+    CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
+    m_H264queue.pop();
+  }
+  while (!m_MVCqueue.empty())
   {
-    CDVDDemuxUtils::FreeDemuxPacket(m_SSIFqueue.front());
-    m_SSIFqueue.pop();
+    CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
+    m_MVCqueue.pop();
   }
+  m_bSSIFSyncing = true;
 }
 
 void CDVDDemuxFFmpeg::Abort()
@@ -688,6 +701,131 @@ double CDVDDemuxFFmpeg::ConvertTimestamp(int64_t pts, int den, int num)
   return timestamp*DVD_TIME_BASE;
 }
 
+DemuxPacket* mergePacket(DemuxPacket* &srcPkt, DemuxPacket* &appendPkt)
+{
+  DemuxPacket* newpkt = NULL;
+  newpkt = CDVDDemuxUtils::AllocateDemuxPacket(srcPkt->iSize + appendPkt->iSize);
+  newpkt->iSize = srcPkt->iSize + appendPkt->iSize;
+
+  newpkt->pts = srcPkt->pts;
+  newpkt->dts = srcPkt->dts;
+  newpkt->duration = srcPkt->duration;
+  newpkt->iGroupId = srcPkt->iGroupId;
+  newpkt->iStreamId = srcPkt->iStreamId;
+  memcpy(newpkt->pData, srcPkt->pData, srcPkt->iSize);
+  memcpy(newpkt->pData + srcPkt->iSize, appendPkt->pData, appendPkt->iSize);
+
+  CDVDDemuxUtils::FreeDemuxPacket(srcPkt);
+  srcPkt = NULL;
+  CDVDDemuxUtils::FreeDemuxPacket(appendPkt);
+  appendPkt = NULL;
+
+  return newpkt;
+}
+
+DemuxPacket* movePacket(DemuxPacket* &srcPkt)
+{
+  DemuxPacket* newpkt = NULL;
+  newpkt = CDVDDemuxUtils::AllocateDemuxPacket(srcPkt->iSize);
+  newpkt->iSize = srcPkt->iSize;
+
+  newpkt->pts = srcPkt->pts;
+  newpkt->dts = srcPkt->dts;
+  newpkt->duration = srcPkt->duration;
+  newpkt->iGroupId = srcPkt->iGroupId;
+  newpkt->iStreamId = srcPkt->iStreamId;
+  memcpy(newpkt->pData, srcPkt->pData, srcPkt->iSize);
+
+  CDVDDemuxUtils::FreeDemuxPacket(srcPkt);
+  srcPkt = NULL;
+
+  return newpkt;
+}
+
+DemuxPacket* CDVDDemuxFFmpeg::GetMVCPacket()
+{
+  // Here, we recreate a h264 MVC packet from the base one + buffered MVC NALU's
+  DemuxPacket* newpkt = NULL;
+
+  double tsH264 = DVD_NOPTS_VALUE;
+  DemuxPacket* h264pkt = NULL;
+  if (!m_H264queue.empty())
+  {
+    h264pkt = m_H264queue.front();
+    tsH264 = (h264pkt->dts != DVD_NOPTS_VALUE ? h264pkt->dts : h264pkt->pts);
+    CLog::Log(LOGDEBUG, ">>> MVC h264 packet: %d, pts(%f) dts (%f)", h264pkt->iSize, h264pkt->pts, h264pkt->dts);
+  }
+
+  double tsMVC = DVD_NOPTS_VALUE;
+  DemuxPacket* mvcpkt = NULL;
+  if (!m_MVCqueue.empty())
+  {
+    mvcpkt = m_MVCqueue.front();
+    tsMVC = (mvcpkt->dts != DVD_NOPTS_VALUE ? mvcpkt->dts : mvcpkt->pts);
+    CLog::Log(LOGDEBUG, ">>> MVC mvc packet: %d, pts(%f) dts (%f)", mvcpkt->iSize, mvcpkt->pts, mvcpkt->dts);
+  }
+
+  if (tsH264 == tsMVC)
+  {
+    m_bSSIFSyncing = false;
+    m_H264queue.pop();
+    m_MVCqueue.pop();
+#if defined(DEBUG_VERBOSE)
+    CLog::Log(LOGDEBUG, ">>> MVC merge packet: %d+%d, pts(%f/%f) dts (%f/%f)", h264pkt->iSize, mvcpkt->iSize, h264pkt->pts, mvcpkt->pts, h264pkt->dts, mvcpkt->dts);
+#endif
+    newpkt = mergePacket(h264pkt, mvcpkt);
+    if (!m_MVCqueue.empty())
+    {
+      mvcpkt = m_MVCqueue.front();
+      while (mvcpkt->dts == DVD_NOPTS_VALUE && mvcpkt->pts == DVD_NOPTS_VALUE)
+      {
+        // Append leftover
+#if defined(DEBUG_VERBOSE)
+        CLog::Log(LOGDEBUG, ">>> MVC merge leftover: %d+%d, pts(%f) dts (%f)", newpkt->iSize, mvcpkt->iSize, newpkt->pts, newpkt->dts);
+#endif
+        newpkt = mergePacket(newpkt, mvcpkt);
+        m_MVCqueue.pop();
+        if (m_MVCqueue.empty())
+          break;
+        mvcpkt = m_MVCqueue.front();
+      }
+    }
+  }
+  else if (tsH264 > tsMVC)
+  {
+#if defined(DEBUG_VERBOSE)
+    CLog::Log(LOGDEBUG, ">>> MVC missing mvc: %d, pts(%f) dts (%f)", h264pkt->iSize, h264pkt->pts, h264pkt->dts);
+#endif
+    if (m_bSSIFSyncing)
+    {
+      if (!m_H264queue.empty())
+      {
+        CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
+        m_H264queue.pop();
+      }
+      while (!m_MVCqueue.empty())
+      {
+        CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
+        m_MVCqueue.pop();
+      }
+    }
+    newpkt = CDVDDemuxUtils::AllocateDemuxPacket(0);
+    newpkt->iSize = 0;
+  }
+  else
+  {
+    if (m_bSSIFSyncing && !m_H264queue.empty())
+    {
+      CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
+      m_H264queue.pop();
+    }
+    newpkt = CDVDDemuxUtils::AllocateDemuxPacket(0);
+    newpkt->iSize = 0;
+  }
+
+  return newpkt;
+}
+
 DemuxPacket* CDVDDemuxFFmpeg::Read()
 {
   DemuxPacket* pPacket = NULL;
@@ -752,10 +890,10 @@ DemuxPacket* CDVDDemuxFFmpeg::Read()
 
       m_pkt.result = -1;
       av_free_packet(&m_pkt.pkt);
-      while (!m_SSIFqueue.empty())
+      while (!m_MVCqueue.empty())
       {
-        CDVDDemuxUtils::FreeDemuxPacket(m_SSIFqueue.front());
-        m_SSIFqueue.pop();
+        CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
+        m_MVCqueue.pop();
       }
     }
     else
@@ -903,129 +1041,22 @@ DemuxPacket* CDVDDemuxFFmpeg::Read()
       }
       if (m_bSSIF && stream->iPhysicalId == 0x1011)
       {
-        // Here, we recreate a h264 MVC packet from the base one + buffered MVC NALU's
-        if (m_SSIFqueue.size() <= 0)
-        {
-          CDVDDemuxUtils::FreeDemuxPacket(pPacket);
-          pPacket = CDVDDemuxUtils::AllocateDemuxPacket(0);
-          pPacket->iSize = 0;
-        }
-        else
-        {
-          double tsA = (pPacket->dts != DVD_NOPTS_VALUE ? pPacket->dts : pPacket->pts);
-          double tsB = DVD_NOPTS_VALUE;
-
-          DemuxPacket* mvcpkt = NULL;
-          if (!m_SSIFqueue.empty())
-          {
-            mvcpkt = m_SSIFqueue.front();
-            tsB = (mvcpkt->dts != DVD_NOPTS_VALUE ? mvcpkt->dts : mvcpkt->pts);
-            while (tsB < tsA)
-            {
-#if defined(DEBUG_VERBOSE)
-              CLog::Log(LOGERROR, "!!! MVC error: missing h264 packet: pts(%f) dts(%f) sz(%d) - %f", mvcpkt->pts, mvcpkt->dts, mvcpkt->iSize, tsA);
-#endif
-              CDVDDemuxUtils::FreeDemuxPacket(mvcpkt);
-              mvcpkt = NULL;
-
-              m_SSIFqueue.pop();
-              if (m_SSIFqueue.empty())
-              {
-                tsB = DVD_NOPTS_VALUE;
-                break;
-              }
-              mvcpkt = m_SSIFqueue.front();
-              tsB = (mvcpkt->dts != DVD_NOPTS_VALUE ? mvcpkt->dts : mvcpkt->pts);
-            }
-          }
-          if (tsA == tsB)
-          {
-            m_SSIFqueue.pop();
-            DemuxPacket* newpkt = CDVDDemuxUtils::AllocateDemuxPacket(pPacket->iSize + mvcpkt->iSize);
-            newpkt->pts = pPacket->pts;
-            newpkt->dts = pPacket->dts;
-            newpkt->duration = pPacket->duration;
-            newpkt->iGroupId = pPacket->iGroupId;
-            newpkt->iStreamId = pPacket->iStreamId;
-            newpkt->iSize = pPacket->iSize + mvcpkt->iSize;
-            memcpy(newpkt->pData, pPacket->pData, pPacket->iSize);
-            memcpy(newpkt->pData + pPacket->iSize, mvcpkt->pData, mvcpkt->iSize);
-
-#if defined(DEBUG_VERBOSE)
-            CLog::Log(LOGDEBUG, ">>> MVC merged packet: %d+%d, pts(%f/%f) dts (%f/%f)", pPacket->iSize, mvcpkt->iSize, pPacket->pts, mvcpkt->pts, pPacket->dts, mvcpkt->dts);
-#endif
-
-            CDVDDemuxUtils::FreeDemuxPacket(pPacket);
-            pPacket = NULL;
-            CDVDDemuxUtils::FreeDemuxPacket(mvcpkt);
-            mvcpkt = NULL;
-
-            if (!m_SSIFqueue.empty())
-            {
-              mvcpkt = m_SSIFqueue.front();
-              while (mvcpkt->dts == DVD_NOPTS_VALUE && mvcpkt->pts == DVD_NOPTS_VALUE)
-              {
-                // Append leftover
-                DemuxPacket* oldpkt = newpkt;
-
-                newpkt = CDVDDemuxUtils::AllocateDemuxPacket(oldpkt->iSize + mvcpkt->iSize);
-                newpkt->iSize = oldpkt->iSize;
-                newpkt->pts = oldpkt->pts;
-                newpkt->dts = oldpkt->dts;
-                newpkt->duration = oldpkt->duration;
-                newpkt->iGroupId = oldpkt->iGroupId;
-                newpkt->iStreamId = oldpkt->iStreamId;
-
-                memcpy(newpkt->pData, oldpkt->pData, oldpkt->iSize);
-                memcpy(newpkt->pData + oldpkt->iSize, mvcpkt->pData, mvcpkt->iSize);
-                newpkt->iSize += mvcpkt->iSize;
-
-#if defined(DEBUG_VERBOSE)
-                CLog::Log(LOGDEBUG, ">>> MVC merged leftover: %d+%d, pts(%f) dts (%f)", oldpkt->iSize, mvcpkt->iSize, newpkt->pts, newpkt->dts);
-#endif
-
-                CDVDDemuxUtils::FreeDemuxPacket(oldpkt);
-                m_SSIFqueue.pop();
-                if (m_SSIFqueue.empty())
-                  break;
-                mvcpkt = m_SSIFqueue.front();
-              }
-            }
+        DemuxPacket* newpkt = movePacket(pPacket);
+        m_H264queue.push(newpkt);
 
-            pPacket = newpkt;
-          }
-          else
-          {
-#if defined(DEBUG_VERBOSE)
-            CLog::Log(LOGERROR, "!!! MVC error: missing mvc packet: pts(%f) dts(%f) sz(%d) - %f", pPacket->pts, pPacket->dts, pPacket->iSize, tsB);
-#endif
-            // Ignore packets without MVC part; solves seeking
-            CDVDDemuxUtils::FreeDemuxPacket(pPacket);
-            pPacket = CDVDDemuxUtils::AllocateDemuxPacket(0);
-            pPacket->iSize = 0;
-          }
-        }
+        pPacket = GetMVCPacket();
       }
     }
     else if (stream->type == STREAM_DATA)
     {
       if (m_bSSIF && stream->iPhysicalId == 0x1012)
       {
-        // Buffer the MVC NALU's for later merging with the base h264 packet
-        // This works because the MVC stream is guaranteed to come first
-        DemuxPacket* newpkt = CDVDDemuxUtils::AllocateDemuxPacket(pPacket->iSize);
-        newpkt->iSize = pPacket->iSize;
-        newpkt->pts = pPacket->pts;
-        newpkt->dts = pPacket->dts;
-        newpkt->duration = pPacket->duration;
-        newpkt->iGroupId = pPacket->iGroupId;
-        newpkt->iStreamId = pPacket->iStreamId;
-        memcpy(newpkt->pData, pPacket->pData, newpkt->iSize);
-        m_SSIFqueue.push(newpkt);
-        
-        CDVDDemuxUtils::FreeDemuxPacket(pPacket);
-        pPacket = CDVDDemuxUtils::AllocateDemuxPacket(0);
-        pPacket->iSize = 0;
+        DemuxPacket* newpkt = movePacket(pPacket);
+        m_MVCqueue.push(newpkt);
+
+        pPacket = GetMVCPacket();
+        if (pPacket->iSize)
+          stream = GetStreamInternal(pPacket->iStreamId);
       }
     }
     if (!stream)
@@ -1050,11 +1081,17 @@ bool CDVDDemuxFFmpeg::SeekTime(int time, bool backwords, double *startpts)
 
   m_pkt.result = -1;
   av_free_packet(&m_pkt.pkt);
-  while (!m_SSIFqueue.empty())
+  while (!m_H264queue.empty())
+  {
+    CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
+    m_H264queue.pop();
+  }
+  while (!m_MVCqueue.empty())
   {
-    CDVDDemuxUtils::FreeDemuxPacket(m_SSIFqueue.front());
-    m_SSIFqueue.pop();
+    CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
+    m_MVCqueue.pop();
   }
+  m_bSSIFSyncing = true;
 
   CDVDInputStream::ISeekTime* ist = dynamic_cast<CDVDInputStream::ISeekTime*>(m_pInput);
   if (ist)
@@ -1122,11 +1159,17 @@ bool CDVDDemuxFFmpeg::SeekByte(int64_t pos)
 
   m_pkt.result = -1;
   av_free_packet(&m_pkt.pkt);
-  while (!m_SSIFqueue.empty())
+  while (!m_H264queue.empty())
+  {
+    CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
+    m_H264queue.pop();
+  }
+  while (!m_MVCqueue.empty())
   {
-    CDVDDemuxUtils::FreeDemuxPacket(m_SSIFqueue.front());
-    m_SSIFqueue.pop();
+    CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
+    m_MVCqueue.pop();
   }
+  m_bSSIFSyncing = true;
 
   return (ret >= 0);
 }
diff --git a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.h b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.h
index c17a016..409da8e 100644
--- a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.h
+++ b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.h
@@ -133,6 +133,7 @@ class CDVDDemuxFFmpeg : public CDVDDemux
   void ParsePacket(AVPacket *pkt);
   bool IsVideoReady();
   void ResetVideoStreams();
+  DemuxPacket* GetMVCPacket();
 
   AVDictionary *GetFFMpegOptionsFromURL(const CURL &url);
   double ConvertTimestamp(int64_t pts, int den, int num);
@@ -155,7 +156,9 @@ class CDVDDemuxFFmpeg : public CDVDDemux
   bool     m_bMatroska;
   bool     m_bAVI;
   bool     m_bSSIF;
-  std::queue<DemuxPacket*> m_SSIFqueue;
+  bool     m_bSSIFSyncing;
+  std::queue<DemuxPacket*> m_H264queue;
+  std::queue<DemuxPacket*> m_MVCqueue;
   int      m_speed;
   unsigned m_program;
   XbmcThreads::EndTime  m_timeout;
diff --git a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
index 3e0ab35..15b27df 100644
--- a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
+++ b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
@@ -793,6 +793,7 @@ DemuxPacket* CDVDDemuxFFmpeg::GetMVCPacket()
   }
   else if (tsH264 > tsMVC)
   {
+    // H264 before MVC ?
 #if defined(DEBUG_VERBOSE)
     CLog::Log(LOGDEBUG, ">>> MVC missing mvc: %d, pts(%f) dts (%f)", h264pkt->iSize, h264pkt->pts, h264pkt->dts);
 #endif
@@ -809,6 +810,12 @@ DemuxPacket* CDVDDemuxFFmpeg::GetMVCPacket()
         m_MVCqueue.pop();
       }
     }
+    else if (!m_MVCqueue.empty())
+    {
+      // pop or we are stuck
+      CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
+      m_MVCqueue.pop();
+    }
     newpkt = CDVDDemuxUtils::AllocateDemuxPacket(0);
     newpkt->iSize = 0;
   }
@@ -819,6 +826,16 @@ DemuxPacket* CDVDDemuxFFmpeg::GetMVCPacket()
       CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
       m_H264queue.pop();
     }
+    else if (!m_H264queue.empty())
+    {
+      // missing an MVC packets
+#if defined(DEBUG_VERBOSE)
+      CLog::Log(LOGDEBUG, ">>> MVC missing mvc2: %d, pts(%f) dts (%f)", h264pkt->iSize, h264pkt->pts, h264pkt->dts);
+#endif
+      // pop or we are stuck
+      CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
+      m_H264queue.pop();
+    }
     newpkt = CDVDDemuxUtils::AllocateDemuxPacket(0);
     newpkt->iSize = 0;
   }
From b0e2f7af8653409485bef533536575e6e8eb85a9 Mon Sep 17 00:00:00 2001
From: popcornmix <popcornmix@gmail.com>
Date: Mon, 18 Jan 2016 18:38:30 +0000
Subject: [PATCH] ssif: tidy up the logic for merging ssif packets

---
 .../cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp | 153 ++++++++++-----------
 1 file changed, 76 insertions(+), 77 deletions(-)

diff --git a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
index 15b27df..88e7b7a 100644
--- a/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
+++ b/xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
@@ -52,7 +52,7 @@
 #include "stdint.h"
 #endif
 
-//#define DEBUG_VERBOSE 1
+#define DEBUG_VERBOSE 1
 
 extern "C" {
 #include "libavutil/opt.h"
@@ -521,6 +521,9 @@ void CDVDDemuxFFmpeg::Dispose()
 {
   m_pkt.result = -1;
   av_free_packet(&m_pkt.pkt);
+#if defined(DEBUG_VERBOSE)
+  CLog::Log(LOGDEBUG, ">>> Dispose: flushing queue(%d,%d)", m_MVCqueue.size(), m_H264queue.size());
+#endif
   while (!m_H264queue.empty())
   {
     CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
@@ -580,6 +583,9 @@ void CDVDDemuxFFmpeg::Flush()
 
   m_pkt.result = -1;
   av_free_packet(&m_pkt.pkt);
+#if defined(DEBUG_VERBOSE)
+  CLog::Log(LOGDEBUG, ">>> Flush: flushing queue(%d,%d)", m_MVCqueue.size(), m_H264queue.size());
+#endif
   while (!m_H264queue.empty())
   {
     CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
@@ -745,102 +751,77 @@ DemuxPacket* movePacket(DemuxPacket* &srcPkt)
 DemuxPacket* CDVDDemuxFFmpeg::GetMVCPacket()
 {
   // Here, we recreate a h264 MVC packet from the base one + buffered MVC NALU's
-  DemuxPacket* newpkt = NULL;
-
-  double tsH264 = DVD_NOPTS_VALUE;
-  DemuxPacket* h264pkt = NULL;
-  if (!m_H264queue.empty())
+  while (!m_H264queue.empty() && !m_MVCqueue.empty())
   {
-    h264pkt = m_H264queue.front();
-    tsH264 = (h264pkt->dts != DVD_NOPTS_VALUE ? h264pkt->dts : h264pkt->pts);
-    CLog::Log(LOGDEBUG, ">>> MVC h264 packet: %d, pts(%f) dts (%f)", h264pkt->iSize, h264pkt->pts, h264pkt->dts);
-  }
+    DemuxPacket* h264pkt = m_H264queue.front();
+    double tsH264 = (h264pkt->dts != DVD_NOPTS_VALUE ? h264pkt->dts : h264pkt->pts);
+    DemuxPacket* mvcpkt = m_MVCqueue.front();
+    double tsMVC = (mvcpkt->dts != DVD_NOPTS_VALUE ? mvcpkt->dts : mvcpkt->pts);
 
-  double tsMVC = DVD_NOPTS_VALUE;
-  DemuxPacket* mvcpkt = NULL;
-  if (!m_MVCqueue.empty())
-  {
-    mvcpkt = m_MVCqueue.front();
-    tsMVC = (mvcpkt->dts != DVD_NOPTS_VALUE ? mvcpkt->dts : mvcpkt->pts);
-    CLog::Log(LOGDEBUG, ">>> MVC mvc packet: %d, pts(%f) dts (%f)", mvcpkt->iSize, mvcpkt->pts, mvcpkt->dts);
-  }
-
-  if (tsH264 == tsMVC)
-  {
-    m_bSSIFSyncing = false;
-    m_H264queue.pop();
-    m_MVCqueue.pop();
-#if defined(DEBUG_VERBOSE)
-    CLog::Log(LOGDEBUG, ">>> MVC merge packet: %d+%d, pts(%f/%f) dts (%f/%f)", h264pkt->iSize, mvcpkt->iSize, h264pkt->pts, mvcpkt->pts, h264pkt->dts, mvcpkt->dts);
-#endif
-    newpkt = mergePacket(h264pkt, mvcpkt);
-    if (!m_MVCqueue.empty())
+    if (tsH264 == tsMVC)
     {
-      mvcpkt = m_MVCqueue.front();
-      while (mvcpkt->dts == DVD_NOPTS_VALUE && mvcpkt->pts == DVD_NOPTS_VALUE)
+      m_bSSIFSyncing = false;
+      m_H264queue.pop();
+      m_MVCqueue.pop();
+
+      while (!m_H264queue.empty())
       {
-        // Append leftover
-#if defined(DEBUG_VERBOSE)
-        CLog::Log(LOGDEBUG, ">>> MVC merge leftover: %d+%d, pts(%f) dts (%f)", newpkt->iSize, mvcpkt->iSize, newpkt->pts, newpkt->dts);
-#endif
-        newpkt = mergePacket(newpkt, mvcpkt);
-        m_MVCqueue.pop();
-        if (m_MVCqueue.empty())
+        DemuxPacket* pkt = m_H264queue.front();
+        double ts = (pkt->dts != DVD_NOPTS_VALUE ? pkt->dts : pkt->pts);
+        if (ts == DVD_NOPTS_VALUE)
+        {
+          #if defined(DEBUG_VERBOSE)
+          CLog::Log(LOGDEBUG, ">>> MVC merge h264 fragment: %6d+%6d, pts(%.3f/%.3f) dts(%.3f/%.3f) sync:%d", h264pkt->iSize, pkt->iSize, h264pkt->pts*1e-6, pkt->pts*1e-6, h264pkt->dts*1e-6, pkt->dts*1e-6, m_bSSIFSyncing);
+          #endif
+          h264pkt = mergePacket(h264pkt, pkt);
+          m_H264queue.pop();
+        }
+        else
           break;
-        mvcpkt = m_MVCqueue.front();
-      }
-    }
-  }
-  else if (tsH264 > tsMVC)
-  {
-    // H264 before MVC ?
-#if defined(DEBUG_VERBOSE)
-    CLog::Log(LOGDEBUG, ">>> MVC missing mvc: %d, pts(%f) dts (%f)", h264pkt->iSize, h264pkt->pts, h264pkt->dts);
-#endif
-    if (m_bSSIFSyncing)
-    {
-      if (!m_H264queue.empty())
-      {
-        CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
-        m_H264queue.pop();
       }
       while (!m_MVCqueue.empty())
       {
-        CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
-        m_MVCqueue.pop();
+        DemuxPacket* pkt = m_MVCqueue.front();
+        double ts = (pkt->dts != DVD_NOPTS_VALUE ? pkt->dts : pkt->pts);
+        if (ts == DVD_NOPTS_VALUE)
+        {
+          #if defined(DEBUG_VERBOSE)
+          CLog::Log(LOGDEBUG, ">>> MVC merge mvc fragment: %6d+%6d, pts(%.3f/%.3f) dts(%.3f/%.3f) sync:%d", mvcpkt->iSize, pkt->iSize, mvcpkt->pts*1e-6, pkt->pts*1e-6, mvcpkt->dts*1e-6, pkt->dts*1e-6, m_bSSIFSyncing);
+          #endif
+          mvcpkt = mergePacket(mvcpkt, pkt);
+          m_MVCqueue.pop();
+        }
+        else
+          break;
       }
+
+      #if defined(DEBUG_VERBOSE)
+      CLog::Log(LOGDEBUG, ">>> MVC merge packet: %6d+%6d, pts(%.3f/%.3f) dts(%.3f/%.3f) sync:%d", h264pkt->iSize, mvcpkt->iSize, h264pkt->pts*1e-6, mvcpkt->pts*1e-6, h264pkt->dts*1e-6, mvcpkt->dts*1e-6, m_bSSIFSyncing);
+      #endif
+      return mergePacket(h264pkt, mvcpkt);
     }
-    else if (!m_MVCqueue.empty())
+    else if (tsH264 > tsMVC)
     {
-      // pop or we are stuck
-      CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
+#if defined(DEBUG_VERBOSE)
+      CLog::Log(LOGDEBUG, ">>> MVC discard  mvc: %6d, pts(%.3f) dts(%.3f) sync:%d", mvcpkt->iSize, mvcpkt->pts*1e-6, mvcpkt->dts*1e-6, m_bSSIFSyncing);
+#endif
+      CDVDDemuxUtils::FreeDemuxPacket(mvcpkt);
       m_MVCqueue.pop();
     }
-    newpkt = CDVDDemuxUtils::AllocateDemuxPacket(0);
-    newpkt->iSize = 0;
-  }
-  else
-  {
-    if (m_bSSIFSyncing && !m_H264queue.empty())
-    {
-      CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
-      m_H264queue.pop();
-    }
-    else if (!m_H264queue.empty())
+    else
     {
-      // missing an MVC packets
 #if defined(DEBUG_VERBOSE)
-      CLog::Log(LOGDEBUG, ">>> MVC missing mvc2: %d, pts(%f) dts (%f)", h264pkt->iSize, h264pkt->pts, h264pkt->dts);
+      CLog::Log(LOGDEBUG, ">>> MVC discard h264: %6d, pts(%.3f) dts(%.3f) sync:%d", h264pkt->iSize, h264pkt->pts*1e-6, h264pkt->dts*1e-6, m_bSSIFSyncing);
 #endif
-      // pop or we are stuck
-      CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
+      CDVDDemuxUtils::FreeDemuxPacket(h264pkt);
       m_H264queue.pop();
     }
-    newpkt = CDVDDemuxUtils::AllocateDemuxPacket(0);
-    newpkt->iSize = 0;
   }
 
-  return newpkt;
+#if defined(DEBUG_VERBOSE)
+  CLog::Log(LOGDEBUG, ">>> MVC waiting. MVC(%d) H264(%d) sync:%d", m_MVCqueue.size(), m_H264queue.size(), m_bSSIFSyncing);
+#endif
+  return CDVDDemuxUtils::AllocateDemuxPacket(0);
 }
 
 DemuxPacket* CDVDDemuxFFmpeg::Read()
@@ -907,11 +888,17 @@ DemuxPacket* CDVDDemuxFFmpeg::Read()
 
       m_pkt.result = -1;
       av_free_packet(&m_pkt.pkt);
+      while (!m_H264queue.empty())
+      {
+        CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
+        m_H264queue.pop();
+      }
       while (!m_MVCqueue.empty())
       {
         CDVDDemuxUtils::FreeDemuxPacket(m_MVCqueue.front());
         m_MVCqueue.pop();
       }
+      m_bSSIFSyncing = true;
     }
     else
     {
@@ -1061,6 +1048,9 @@ DemuxPacket* CDVDDemuxFFmpeg::Read()
         DemuxPacket* newpkt = movePacket(pPacket);
         m_H264queue.push(newpkt);
 
+#if defined(DEBUG_VERBOSE)
+       CLog::Log(LOGDEBUG, ">>> Got H264: %6d, pts(%.3f) dts(%.3f) queue(%d) sync:%d", newpkt->iSize, newpkt->pts*1e-6, newpkt->dts*1e-6, m_H264queue.size(), m_bSSIFSyncing);
+#endif
         pPacket = GetMVCPacket();
       }
     }
@@ -1071,6 +1061,9 @@ DemuxPacket* CDVDDemuxFFmpeg::Read()
         DemuxPacket* newpkt = movePacket(pPacket);
         m_MVCqueue.push(newpkt);
 
+#if defined(DEBUG_VERBOSE)
+    CLog::Log(LOGDEBUG, ">>> Got  MVC: %6d, pts(%.3f) dts(%.3f) queue(%d) sync:%d", newpkt->iSize, newpkt->pts*1e-6, newpkt->dts*1e-6, m_MVCqueue.size(), m_bSSIFSyncing);
+#endif
         pPacket = GetMVCPacket();
         if (pPacket->iSize)
           stream = GetStreamInternal(pPacket->iStreamId);
@@ -1098,6 +1091,9 @@ bool CDVDDemuxFFmpeg::SeekTime(int time, bool backwords, double *startpts)
 
   m_pkt.result = -1;
   av_free_packet(&m_pkt.pkt);
+#if defined(DEBUG_VERBOSE)
+  CLog::Log(LOGDEBUG, ">>> SeekTime: flushing queue(%d,%d)", m_MVCqueue.size(), m_H264queue.size());
+#endif
   while (!m_H264queue.empty())
   {
     CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
@@ -1176,6 +1172,9 @@ bool CDVDDemuxFFmpeg::SeekByte(int64_t pos)
 
   m_pkt.result = -1;
   av_free_packet(&m_pkt.pkt);
+#if defined(DEBUG_VERBOSE)
+  CLog::Log(LOGDEBUG, ">>> SeekByte: flushing queue(%d,%d)", m_MVCqueue.size(), m_H264queue.size());
+#endif
   while (!m_H264queue.empty())
   {
     CDVDDemuxUtils::FreeDemuxPacket(m_H264queue.front());
