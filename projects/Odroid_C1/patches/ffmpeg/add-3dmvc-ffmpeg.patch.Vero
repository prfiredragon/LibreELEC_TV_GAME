--- /dev/null	2016-06-05 18:52:10.307161823 +0100
+++ b/tools/depends/target/ffmpeg/0001-MVC-support-for-FFMPEG.patch	2016-06-09 10:12:14.197233732 +0100
@@ -0,0 +1,131 @@
+From 8a88999224605a9d4a9272bbbc21ef356997a8b5 Mon Sep 17 00:00:00 2001
+From: Sam Nazarko <email@samnazarko.co.uk>
+Date: Thu, 9 Jun 2016 01:53:25 +0100
+Subject: [PATCH] MVC support for FFMPEG
+
+Signed-off-by: Sam Nazarko <email@samnazarko.co.uk>
+---
+ libavcodec/avcodec.h |  4 ++++
+ libavcodec/h264.c    |  5 +++++
+ libavcodec/h264.h    |  3 +++
+ libavformat/mov.c    | 29 +++++++++++++++++++++++++++++
+ libavformat/mpegts.c |  3 +++
+ 5 files changed, 44 insertions(+)
+
+diff --git a/libavcodec/avcodec.h b/libavcodec/avcodec.h
+index bc1b1b9..cab1546 100644
+--- a/libavcodec/avcodec.h
++++ b/libavcodec/avcodec.h
+@@ -296,6 +296,10 @@ enum AVCodecID {
+     AV_CODEC_ID_HAP,
+     AV_CODEC_ID_DDS,
+ 
++    /* H264 MVC type */
++    AV_CODEC_ID_H264MVC    = MKBETAG('M','V','C','C'),
++
++
+     AV_CODEC_ID_BRENDER_PIX= MKBETAG('B','P','I','X'),
+     AV_CODEC_ID_Y41P       = MKBETAG('Y','4','1','P'),
+     AV_CODEC_ID_ESCAPE130  = MKBETAG('E','1','3','0'),
+diff --git a/libavcodec/h264.c b/libavcodec/h264.c
+index 718b746..e1cb53f 100644
+--- a/libavcodec/h264.c
++++ b/libavcodec/h264.c
+@@ -1634,6 +1634,11 @@ again:
+             case NAL_SPS_EXT:
+             case NAL_AUXILIARY_SLICE:
+                 break;
++            case NAL_14:
++            case NAL_15:
++            case NAL_20:
++                avctx->codec_tag = AV_CODEC_ID_H264MVC;
++                break;
+             case NAL_FF_IGNORE:
+                 break;
+             default:
+diff --git a/libavcodec/h264.h b/libavcodec/h264.h
+index 907ee5e..88fc147 100644
+--- a/libavcodec/h264.h
++++ b/libavcodec/h264.h
+@@ -122,7 +122,10 @@ enum {
+     NAL_END_STREAM      = 11,
+     NAL_FILLER_DATA     = 12,
+     NAL_SPS_EXT         = 13,
++    NAL_14              = 14,
++    NAL_15              = 15,
+     NAL_AUXILIARY_SLICE = 19,
++    NAL_20              = 20,
+     NAL_FF_IGNORE       = 0xff0f001,
+ };
+ 
+diff --git a/libavformat/mov.c b/libavformat/mov.c
+index c268b30..536e069 100644
+--- a/libavformat/mov.c
++++ b/libavformat/mov.c
+@@ -1512,6 +1512,34 @@ static int mov_read_glbl(MOVContext *c, AVIOContext *pb, MOVAtom atom)
+     return 0;
+ }
+ 
++static int mov_read_mvcc(MOVContext *c, AVIOContext *pb, MOVAtom atom)
++{
++    int extradata_size;
++    int ret, i;
++    uint32_t n;
++    AVStream *st;
++
++    if (c->fc->nb_streams < 1)
++        return 0;
++    st = c->fc->streams[c->fc->nb_streams-1];
++    extradata_size = st->codec->extradata_size;
++
++    if ((uint64_t)atom.size > (1<<30))
++        return AVERROR_INVALIDDATA;
++
++    if (extradata_size == 0)
++        return 0;
++    if ((ret = mov_read_extradata(c, pb, atom, AV_CODEC_ID_H264)) < 0)
++        return ret;
++    for (i = 0, n = 0; i < 4; i++)
++        n = (n << 8) | st->codec->extradata[extradata_size+i];
++    n -= 4;
++    for (i = 0; i < 4; i++)
++        st->codec->extradata[extradata_size+i] = (n >> ((3 - i) << 3)) & 0xff;
++    st->codec->codec_tag = AV_CODEC_ID_H264MVC;
++    return 0;
++}
++
+ static int mov_read_dvc1(MOVContext *c, AVIOContext *pb, MOVAtom atom)
+ {
+     AVStream *st;
+@@ -3951,6 +3979,7 @@ static const MOVParseTableEntry mov_default_parse_table[] = {
+ { MKTAG('C','i','n', 0x8e), mov_read_targa_y216 },
+ { MKTAG('f','r','e','e'), mov_read_free },
+ { MKTAG('-','-','-','-'), mov_read_custom },
++{ MKTAG('m','v','c','C'), mov_read_mvcc },
+ { 0, NULL }
+ };
+ 
+diff --git a/libavformat/mpegts.c b/libavformat/mpegts.c
+index 29d58eb..4359a19 100644
+--- a/libavformat/mpegts.c
++++ b/libavformat/mpegts.c
+@@ -703,6 +703,7 @@ static const StreamType ISO_types[] = {
+ #endif
+     { 0x1b, AVMEDIA_TYPE_VIDEO, AV_CODEC_ID_H264       },
+     { 0x20, AVMEDIA_TYPE_VIDEO, AV_CODEC_ID_H264       },
++    { 0x20, AVMEDIA_TYPE_DATA,  AV_CODEC_ID_H264       },
+     { 0x21, AVMEDIA_TYPE_VIDEO, AV_CODEC_ID_JPEG2000   },
+     { 0x24, AVMEDIA_TYPE_VIDEO, AV_CODEC_ID_HEVC       },
+     { 0x42, AVMEDIA_TYPE_VIDEO, AV_CODEC_ID_CAVS       },
+@@ -838,6 +839,8 @@ static int mpegts_set_stream_info(AVStream *st, PESContext *pes,
+             sub_pes->sub_st           = pes->sub_st = sub_st;
+         }
+     }
++    if (pes->stream_type == 0x20) // MVC
++        st->codec->codec_tag = AV_CODEC_ID_H264MVC;
+     if (st->codec->codec_id == AV_CODEC_ID_NONE)
+         mpegts_find_stream_type(st, pes->stream_type, MISC_types);
+     if (st->codec->codec_id == AV_CODEC_ID_NONE) {
+-- 
+2.7.4
+
